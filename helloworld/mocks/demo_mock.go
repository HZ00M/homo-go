// Code generated by MockGen. DO NOT EDIT.
// Source: api/helloworld/v1/demo_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	v1 "helloworld/api/helloworld/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDemoClient is a mock of DemoClient interface.
type MockDemoClient struct {
	ctrl     *gomock.Controller
	recorder *MockDemoClientMockRecorder
}

// MockDemoClientMockRecorder is the mock recorder for MockDemoClient.
type MockDemoClientMockRecorder struct {
	mock *MockDemoClient
}

// NewMockDemoClient creates a new mock instance.
func NewMockDemoClient(ctrl *gomock.Controller) *MockDemoClient {
	mock := &MockDemoClient{ctrl: ctrl}
	mock.recorder = &MockDemoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemoClient) EXPECT() *MockDemoClientMockRecorder {
	return m.recorder
}

// CreateDemo mocks base method.
func (m *MockDemoClient) CreateDemo(ctx context.Context, in *v1.CreateDemoRequest, opts ...grpc.CallOption) (*v1.CreateDemoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDemo", varargs...)
	ret0, _ := ret[0].(*v1.CreateDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDemo indicates an expected call of CreateDemo.
func (mr *MockDemoClientMockRecorder) CreateDemo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDemo", reflect.TypeOf((*MockDemoClient)(nil).CreateDemo), varargs...)
}

// DeleteDemo mocks base method.
func (m *MockDemoClient) DeleteDemo(ctx context.Context, in *v1.DeleteDemoRequest, opts ...grpc.CallOption) (*v1.DeleteDemoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDemo", varargs...)
	ret0, _ := ret[0].(*v1.DeleteDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDemo indicates an expected call of DeleteDemo.
func (mr *MockDemoClientMockRecorder) DeleteDemo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDemo", reflect.TypeOf((*MockDemoClient)(nil).DeleteDemo), varargs...)
}

// GetDemo mocks base method.
func (m *MockDemoClient) GetDemo(ctx context.Context, in *v1.GetDemoRequest, opts ...grpc.CallOption) (*v1.GetDemoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDemo", varargs...)
	ret0, _ := ret[0].(*v1.GetDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemo indicates an expected call of GetDemo.
func (mr *MockDemoClientMockRecorder) GetDemo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemo", reflect.TypeOf((*MockDemoClient)(nil).GetDemo), varargs...)
}

// ListDemo mocks base method.
func (m *MockDemoClient) ListDemo(ctx context.Context, in *v1.ListDemoRequest, opts ...grpc.CallOption) (*v1.ListDemoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDemo", varargs...)
	ret0, _ := ret[0].(*v1.ListDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDemo indicates an expected call of ListDemo.
func (mr *MockDemoClientMockRecorder) ListDemo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDemo", reflect.TypeOf((*MockDemoClient)(nil).ListDemo), varargs...)
}

// UpdateDemo mocks base method.
func (m *MockDemoClient) UpdateDemo(ctx context.Context, in *v1.UpdateDemoRequest, opts ...grpc.CallOption) (*v1.UpdateDemoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDemo", varargs...)
	ret0, _ := ret[0].(*v1.UpdateDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDemo indicates an expected call of UpdateDemo.
func (mr *MockDemoClientMockRecorder) UpdateDemo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDemo", reflect.TypeOf((*MockDemoClient)(nil).UpdateDemo), varargs...)
}

// MockDemoServer is a mock of DemoServer interface.
type MockDemoServer struct {
	ctrl     *gomock.Controller
	recorder *MockDemoServerMockRecorder
}

// MockDemoServerMockRecorder is the mock recorder for MockDemoServer.
type MockDemoServerMockRecorder struct {
	mock *MockDemoServer
}

// NewMockDemoServer creates a new mock instance.
func NewMockDemoServer(ctrl *gomock.Controller) *MockDemoServer {
	mock := &MockDemoServer{ctrl: ctrl}
	mock.recorder = &MockDemoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemoServer) EXPECT() *MockDemoServerMockRecorder {
	return m.recorder
}

// CreateDemo mocks base method.
func (m *MockDemoServer) CreateDemo(arg0 context.Context, arg1 *v1.CreateDemoRequest) (*v1.CreateDemoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDemo", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDemo indicates an expected call of CreateDemo.
func (mr *MockDemoServerMockRecorder) CreateDemo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDemo", reflect.TypeOf((*MockDemoServer)(nil).CreateDemo), arg0, arg1)
}

// DeleteDemo mocks base method.
func (m *MockDemoServer) DeleteDemo(arg0 context.Context, arg1 *v1.DeleteDemoRequest) (*v1.DeleteDemoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDemo", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDemo indicates an expected call of DeleteDemo.
func (mr *MockDemoServerMockRecorder) DeleteDemo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDemo", reflect.TypeOf((*MockDemoServer)(nil).DeleteDemo), arg0, arg1)
}

// GetDemo mocks base method.
func (m *MockDemoServer) GetDemo(arg0 context.Context, arg1 *v1.GetDemoRequest) (*v1.GetDemoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDemo", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemo indicates an expected call of GetDemo.
func (mr *MockDemoServerMockRecorder) GetDemo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemo", reflect.TypeOf((*MockDemoServer)(nil).GetDemo), arg0, arg1)
}

// ListDemo mocks base method.
func (m *MockDemoServer) ListDemo(arg0 context.Context, arg1 *v1.ListDemoRequest) (*v1.ListDemoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDemo", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDemo indicates an expected call of ListDemo.
func (mr *MockDemoServerMockRecorder) ListDemo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDemo", reflect.TypeOf((*MockDemoServer)(nil).ListDemo), arg0, arg1)
}

// UpdateDemo mocks base method.
func (m *MockDemoServer) UpdateDemo(arg0 context.Context, arg1 *v1.UpdateDemoRequest) (*v1.UpdateDemoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDemo", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateDemoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDemo indicates an expected call of UpdateDemo.
func (mr *MockDemoServerMockRecorder) UpdateDemo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDemo", reflect.TypeOf((*MockDemoServer)(nil).UpdateDemo), arg0, arg1)
}

// mustEmbedUnimplementedDemoServer mocks base method.
func (m *MockDemoServer) mustEmbedUnimplementedDemoServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDemoServer")
}

// mustEmbedUnimplementedDemoServer indicates an expected call of mustEmbedUnimplementedDemoServer.
func (mr *MockDemoServerMockRecorder) mustEmbedUnimplementedDemoServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDemoServer", reflect.TypeOf((*MockDemoServer)(nil).mustEmbedUnimplementedDemoServer))
}

// MockUnsafeDemoServer is a mock of UnsafeDemoServer interface.
type MockUnsafeDemoServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDemoServerMockRecorder
}

// MockUnsafeDemoServerMockRecorder is the mock recorder for MockUnsafeDemoServer.
type MockUnsafeDemoServerMockRecorder struct {
	mock *MockUnsafeDemoServer
}

// NewMockUnsafeDemoServer creates a new mock instance.
func NewMockUnsafeDemoServer(ctrl *gomock.Controller) *MockUnsafeDemoServer {
	mock := &MockUnsafeDemoServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDemoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDemoServer) EXPECT() *MockUnsafeDemoServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDemoServer mocks base method.
func (m *MockUnsafeDemoServer) mustEmbedUnimplementedDemoServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDemoServer")
}

// mustEmbedUnimplementedDemoServer indicates an expected call of mustEmbedUnimplementedDemoServer.
func (mr *MockUnsafeDemoServerMockRecorder) mustEmbedUnimplementedDemoServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDemoServer", reflect.TypeOf((*MockUnsafeDemoServer)(nil).mustEmbedUnimplementedDemoServer))
}
