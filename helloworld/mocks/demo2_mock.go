// Code generated by MockGen. DO NOT EDIT.
// Source: api/helloworld/v1/demo2_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	v1 "helloworld/api/helloworld/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDemo2Client is a mock of Demo2Client interface.
type MockDemo2Client struct {
	ctrl     *gomock.Controller
	recorder *MockDemo2ClientMockRecorder
}

// MockDemo2ClientMockRecorder is the mock recorder for MockDemo2Client.
type MockDemo2ClientMockRecorder struct {
	mock *MockDemo2Client
}

// NewMockDemo2Client creates a new mock instance.
func NewMockDemo2Client(ctrl *gomock.Controller) *MockDemo2Client {
	mock := &MockDemo2Client{ctrl: ctrl}
	mock.recorder = &MockDemo2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemo2Client) EXPECT() *MockDemo2ClientMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockDemo2Client) Hello(ctx context.Context, in *v1.HelloReq, opts ...grpc.CallOption) (*v1.HelloRep, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hello", varargs...)
	ret0, _ := ret[0].(*v1.HelloRep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockDemo2ClientMockRecorder) Hello(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockDemo2Client)(nil).Hello), varargs...)
}

// Hi mocks base method.
func (m *MockDemo2Client) Hi(ctx context.Context, in *v1.Demo2Request, opts ...grpc.CallOption) (*v1.Demo2Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hi", varargs...)
	ret0, _ := ret[0].(*v1.Demo2Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hi indicates an expected call of Hi.
func (mr *MockDemo2ClientMockRecorder) Hi(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hi", reflect.TypeOf((*MockDemo2Client)(nil).Hi), varargs...)
}

// MockDemo2Server is a mock of Demo2Server interface.
type MockDemo2Server struct {
	ctrl     *gomock.Controller
	recorder *MockDemo2ServerMockRecorder
}

// MockDemo2ServerMockRecorder is the mock recorder for MockDemo2Server.
type MockDemo2ServerMockRecorder struct {
	mock *MockDemo2Server
}

// NewMockDemo2Server creates a new mock instance.
func NewMockDemo2Server(ctrl *gomock.Controller) *MockDemo2Server {
	mock := &MockDemo2Server{ctrl: ctrl}
	mock.recorder = &MockDemo2ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemo2Server) EXPECT() *MockDemo2ServerMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockDemo2Server) Hello(arg0 context.Context, arg1 *v1.HelloReq) (*v1.HelloRep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", arg0, arg1)
	ret0, _ := ret[0].(*v1.HelloRep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockDemo2ServerMockRecorder) Hello(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockDemo2Server)(nil).Hello), arg0, arg1)
}

// Hi mocks base method.
func (m *MockDemo2Server) Hi(arg0 context.Context, arg1 *v1.Demo2Request) (*v1.Demo2Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hi", arg0, arg1)
	ret0, _ := ret[0].(*v1.Demo2Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hi indicates an expected call of Hi.
func (mr *MockDemo2ServerMockRecorder) Hi(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hi", reflect.TypeOf((*MockDemo2Server)(nil).Hi), arg0, arg1)
}

// mustEmbedUnimplementedDemo2Server mocks base method.
func (m *MockDemo2Server) mustEmbedUnimplementedDemo2Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDemo2Server")
}

// mustEmbedUnimplementedDemo2Server indicates an expected call of mustEmbedUnimplementedDemo2Server.
func (mr *MockDemo2ServerMockRecorder) mustEmbedUnimplementedDemo2Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDemo2Server", reflect.TypeOf((*MockDemo2Server)(nil).mustEmbedUnimplementedDemo2Server))
}

// MockUnsafeDemo2Server is a mock of UnsafeDemo2Server interface.
type MockUnsafeDemo2Server struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDemo2ServerMockRecorder
}

// MockUnsafeDemo2ServerMockRecorder is the mock recorder for MockUnsafeDemo2Server.
type MockUnsafeDemo2ServerMockRecorder struct {
	mock *MockUnsafeDemo2Server
}

// NewMockUnsafeDemo2Server creates a new mock instance.
func NewMockUnsafeDemo2Server(ctrl *gomock.Controller) *MockUnsafeDemo2Server {
	mock := &MockUnsafeDemo2Server{ctrl: ctrl}
	mock.recorder = &MockUnsafeDemo2ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDemo2Server) EXPECT() *MockUnsafeDemo2ServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDemo2Server mocks base method.
func (m *MockUnsafeDemo2Server) mustEmbedUnimplementedDemo2Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDemo2Server")
}

// mustEmbedUnimplementedDemo2Server indicates an expected call of mustEmbedUnimplementedDemo2Server.
func (mr *MockUnsafeDemo2ServerMockRecorder) mustEmbedUnimplementedDemo2Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDemo2Server", reflect.TypeOf((*MockUnsafeDemo2Server)(nil).mustEmbedUnimplementedDemo2Server))
}
