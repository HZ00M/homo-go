// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.1
// source: helloworld/v1/demo2.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDemo2Hello = "/api.helloworld.v1.Demo2/Hello"
const OperationDemo2Hi = "/api.helloworld.v1.Demo2/Hi"

type Demo2HTTPServer interface {
	Hello(context.Context, *HelloReq) (*HelloRep, error)
	// Hi Sends a greeting
	Hi(context.Context, *Demo2Request) (*Demo2Reply, error)
}

func RegisterDemo2HTTPServer(s *http.Server, srv Demo2HTTPServer) {
	r := s.Route("/")
	r.GET("/demo2/{name}", _Demo2_Hi0_HTTP_Handler(srv))
	r.POST("/demo2/hello", _Demo2_Hello0_HTTP_Handler(srv))
}

func _Demo2_Hi0_HTTP_Handler(srv Demo2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Demo2Request
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemo2Hi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hi(ctx, req.(*Demo2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Demo2Reply)
		return ctx.Result(200, reply)
	}
}

func _Demo2_Hello0_HTTP_Handler(srv Demo2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemo2Hello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*HelloReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloRep)
		return ctx.Result(200, reply)
	}
}

type Demo2HTTPClient interface {
	Hello(ctx context.Context, req *HelloReq, opts ...http.CallOption) (rsp *HelloRep, err error)
	Hi(ctx context.Context, req *Demo2Request, opts ...http.CallOption) (rsp *Demo2Reply, err error)
}

type Demo2HTTPClientImpl struct {
	cc *http.Client
}

func NewDemo2HTTPClient(client *http.Client) Demo2HTTPClient {
	return &Demo2HTTPClientImpl{client}
}

func (c *Demo2HTTPClientImpl) Hello(ctx context.Context, in *HelloReq, opts ...http.CallOption) (*HelloRep, error) {
	var out HelloRep
	pattern := "/demo2/hello"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDemo2Hello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Demo2HTTPClientImpl) Hi(ctx context.Context, in *Demo2Request, opts ...http.CallOption) (*Demo2Reply, error) {
	var out Demo2Reply
	pattern := "/demo2/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDemo2Hi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
