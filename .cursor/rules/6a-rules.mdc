---
alwaysApply: true
---
# Cursor 项目 6A 工作流规则

本文档定义 Cursor 项目的 **6A 工作流程（Aim / Analyze / Architect / Act / Assure / Advance）** 以及 **MDC 管理规范**（Module / Doc / Code），确保每个任务在目标、分析、设计、实施、验证、迭代各阶段都有清晰的执行规范、可追溯记录，并与代码实现保持同步。

---

## 🎯 工作流触发规则
规则1：当在对话中引入某个目录并声明 **`6a迁移`** 时，顺序执行下面步骤：
1. 在引入目录下创建 `todo/` 目录用来放置这个模块的任务文档。
2. 在todo/目录下基于引用的代码的接口与对应的实现创建todolist.md,将java版本的代码实现转成go版本的代码实现
3. 转换的过程中结合go和kratos开发最佳实践进行调整
3. 根据todolist.md对每个任务使用 **6A 任务模板** 创建对应的 `Task-XX-xxx.md` 文件。


规则2：当在对话中引入某个目录并声明 **`6a创建`** 时，顺序执行下面步骤：
1. 在引入目录下创建 `todo/` 目录用来放置这个模块的任务文档。
2. 在当前目录生成或更新 `todolist.md`，列出所有拆分的模块任务。
3. 每个模块任务使用 **6A 任务模板** 创建对应的 `Task-XX-xxx.md` 文件。
4. **任务来源优先级**：
   - 已实现代码 → 自动分析生成文档
   - 存在 `requirements.md` → 根据需求文档的功能需求拆分出模块任务
   - 否则提示 “请先创建 requirements.md”
5. 从 todolist.md 自动读取现有最大编号，+1 生成新任务编号
6. 从任务文件的 状态、优先级、完成度 自动同步到 todolist

规则3：当在对话中引入某个目录并声明 **`6a执行`** 时，顺序执行下面步骤：
1. 根据todolist.md及6a任务列表开始代码生成
2. 遵循todolist.md的声明的目录
---

## 📌 任务状态概览（todolist.md 格式）
## 1. 功能目录结构图及文件规划信息（尽量简洁内聚）
## 2. 类图
## 3. 调用流程图
## 4. 任务列表

| 任务 | 状态 | 优先级 | 完成度 | 责任人 | 预计完成时间 | 备注 |
|------|------|--------|--------|--------|--------------|------|
| Task-01 | ✅ 已完成 | 🔴 高 | 100% | 张三 | 2025-08-10 | Actor 队列机制，串行执行保障 |
| Task-02 | ✅ 已完成 | 🔴 高 | 100% | 李四 | 2025-08-12 | EntityMgr 实体生命周期管理 |
| Task-03 | 🔄 进行中 | 🔴 高 | 60% | 王五 | 2025-08-20 | AbilitySystem 能力系统初始化 |
| Task-04 | ❌ 未开始 | 🔴 高 | 0% | 待分配 | - | StorageSystem 存储系统管理 |


> **todolist.md 每次任务更新时必须同步更新**

---
## 需求文档（requirements.md格式）

## 1. 项目背景
简述业务背景与问题、目标与范围。

## 2. 功能目标
- 明确任务完成后的业务价值和可量化指标

## 3. 功能需求（FR）
需要按照依赖关系进行优先级排列
| 编号 | 功能描述 | 优先级 | 验收标准 |
|------|----------|--------|----------|
| FR-01 | 提供统一调用接口协议 | 🔴 高 | 所有模块按协议调用无差异 |

## 4. 非功能需求（NFR）
- 可扩展性
- 隔离性
- 灵活性
- 通用性

## 5. 核心设计规则
1. 单一职责
2. 接口优先
3. 可扩展性
4. 模块边界清晰
5. 观测性内建
6. 失败优雅降级

## 6. 核心设计
### 架构图
mermaid类图，流程图
### 核心接口
接口功能，参数，返回值都做好描述
### 数据模型与协议
结构字段，协议属性都做好描述
### 使用示例
给出使用该模块功能的预期代码，可以使用伪代码描述

## 7. 约束与边界
列出依赖模块，本模块提供的功能边界，预期给哪些功能提供支持

## 8.  模块目录规划 与 文件预期
按照go模块及命名哲学进行规划

## 9.  验收标准
列出核心测试列表
 
---
## 📍 6A 工作流规则

- **A1 目标（Aim）**: 定义核心目标和业务价值，避免技术实现细节。
- **A2 分析（Analyze）**: 分析现状、差距、约束与风险。
- **A3 设计（Architect）**: 设计系统架构、接口契约、任务拆分。
- **A4 行动（Act）**: 记录实施步骤、修改文件、依赖关系。
- **A5 验证（Assure）**: 包含单元测试、集成测试、性能验证、回归测试。
- **A6 迭代（Advance）**: 后续优化、功能扩展、观测性增强，并链接下一任务的 A1。

---

## 🔺 优先级说明

- 🔴 **高**: 核心功能，必须优先完成
- 🟡 **中**: 重要功能，按计划完成
- 🟢 **低**: 增强功能，可延后完成

## 🔹 状态说明

- ✅ 已完成
- 🔄 进行中
- ❌ 未开始
- ⚠️ 阻塞（需外部条件才能继续）

---

## 📋 质量检查清单

**代码质量**：
- [ ] 静态检查（`go vet` / `eslint` 等）
- [ ] 规范检查（`golangci-lint` / `prettier` 等）
- [ ] 并发/竞态检查（`go test -race` 等）
- [ ] 覆盖率 ≥ 80%

**文档质量**：
- [ ] 注释完整且准确
- [ ] 接口文档与实现一致
- [ ] 架构图清晰且最新
- [ ] 更新日志完整

**测试质量**：
- [ ] 单元测试覆盖核心功能
- [ ] 集成测试验证模块交互
- [ ] 性能测试达标
- [ ] 边界条件测试充分
- [ ] 回归测试验证老功能稳定

---

## 📄 6A 任务模板
## 📋 文档关系
- **依赖**: [Task-01](./Task-01-定义核心接口和数据模型.md)
- **被依赖**: [Task-03](./Task-04-实现路由管理器.md)
- **相关文档**: [todolist.md](./todolist.md) | [README.md](./README.md)
```markdown
## 6A 任务卡：[任务名称]

- 编号: Task-XX
- 模块: [模块路径]
- 责任人: [姓名]
- 优先级: [🔴 / 🟡 / 🟢]
- 状态: [✅ / 🔄 / ❌ / ⚠️]
- 预计完成时间: [日期]
- 实际完成时间: [日期]

### A1 目标（Aim）
[描述任务的业务目标与价值]

### A2 分析（Analyze）
- **现状**：
  - ✅ 已实现：
  - 🔄 部分实现：
  - ❌ 未实现：
- **差距**：
- **约束**：
- **风险**：
  - 技术风险：
  - 业务风险：
  - 依赖风险：

### A3 设计（Architect）
- **接口契约**：
  - **核心接口**：`StatefulExecutor` - 定义所有有状态操作的核心接口
  - **核心方法**：
    - `SetServiceState(ctx context.Context, namespace, serviceName string, podId int, state string) error`
    - `GetServiceState(ctx context.Context, namespace, serviceName string) (map[int]string, error)` 
  - **输入输出参数及错误码**：
    - 使用Go标准库的`context.Context`进行超时和取消控制
    - 返回`error`接口类型，支持错误包装和类型断言
    - 使用Go的多返回值特性返回结果和错误

- **架构设计**：
  - 采用接口分离原则，将不同功能模块分离到不同接口
  - 使用组合模式，将Lua脚本执行器、Redis连接池等功能组合到主执行器中
  - 支持依赖注入，便于测试和配置管理

- **核心功能模块**：
  - `StatefulExecutor`: 主执行器接口
  - `RedisManager`: Redis综合管理器（集成连接池、Lua脚本管理、配置管理）
  - `StatefulModels`: 数据模型定义

- **极小任务拆分**：
  - T01-01：定义`StatefulExecutor`核心接口
  - T01-02：定义`RedisManager`接口（集成连接池、Lua脚本管理、配置管理）
  - T01-03：设计数据模型结构体
  - T01-04：定义错误类型和错误码

### A4 行动（Act）
[对A3拆分出来的任务的具体代码的实施步骤、文件位置，相关依赖]
#### T01-01：定义`StatefulExecutor`核心接口
```go
// interface.go
package executor

import "context"

// StatefulExecutor 定义所有有状态操作的核心接口
type StatefulExecutor interface {
    // 服务状态管理
    SetServiceState(ctx context.Context, namespace, serviceName string, podId int, state string) error
    GetServiceState(ctx context.Context, namespace, serviceName string) (map[int]string, error) 
}
```
#### T01-02：定义`RedisManager`接口（集成连接池、Lua脚本管理、配置管理）
```go
// redis_manager.go
package executor

import (
    "context"
    "github.com/redis/go-redis/v9"
)

// RedisManager Redis综合管理器接口（集成连接池、Lua脚本管理、配置管理）
type RedisManager interface {
    // 连接池管理
    GetConnection(ctx context.Context) (*redis.Client, error)
    ReleaseConnection(client *redis.Client) 
}
```
### A5 验证（Assure）
- **测试用例**：
- **性能验证**：
- **回归测试**：
- **测试结果**：

### A6 迭代（Advance）
- 性能优化：
- 功能扩展：
- 观测性增强：
- 下一步任务链接：

### 📋 质量检查
- [ ] 代码质量检查完成
- [ ] 文档质量检查完成
- [ ] 测试质量检查完成

### 📋 完成总结
[总结任务完成情况]
