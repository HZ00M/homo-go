// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.1
// source: rpc/call.proto

package rpc

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRouterServiceJsonMessage = "/rpc.RouterService/JsonMessage"
const OperationRouterServiceRpcCall = "/rpc.RouterService/RpcCall"

type RouterServiceHTTPServer interface {
	JsonMessage(context.Context, *JsonReq) (*JsonRsp, error)
	RpcCall(context.Context, *Req) (*Rsp, error)
}

func RegisterRouterServiceHTTPServer(s *http.Server, srv RouterServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/rpc/JsonMessage", _RouterService_JsonMessage0_HTTP_Handler(srv))
	r.POST("/rpc/RpcCall", _RouterService_RpcCall0_HTTP_Handler(srv))
}

func _RouterService_JsonMessage0_HTTP_Handler(srv RouterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JsonReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterServiceJsonMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JsonMessage(ctx, req.(*JsonReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JsonRsp)
		return ctx.Result(200, reply)
	}
}

func _RouterService_RpcCall0_HTTP_Handler(srv RouterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Req
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterServiceRpcCall)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RpcCall(ctx, req.(*Req))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Rsp)
		return ctx.Result(200, reply)
	}
}

type RouterServiceHTTPClient interface {
	JsonMessage(ctx context.Context, req *JsonReq, opts ...http.CallOption) (rsp *JsonRsp, err error)
	RpcCall(ctx context.Context, req *Req, opts ...http.CallOption) (rsp *Rsp, err error)
}

type RouterServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRouterServiceHTTPClient(client *http.Client) RouterServiceHTTPClient {
	return &RouterServiceHTTPClientImpl{client}
}

func (c *RouterServiceHTTPClientImpl) JsonMessage(ctx context.Context, in *JsonReq, opts ...http.CallOption) (*JsonRsp, error) {
	var out JsonRsp
	pattern := "/rpc/JsonMessage"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRouterServiceJsonMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RouterServiceHTTPClientImpl) RpcCall(ctx context.Context, in *Req, opts ...http.CallOption) (*Rsp, error) {
	var out Rsp
	pattern := "/rpc/RpcCall"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRouterServiceRpcCall))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
