// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: rpc/call.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RouterService_JsonMessage_FullMethodName = "/rpc.RouterService/JsonMessage"
	RouterService_RpcCall_FullMethodName     = "/rpc.RouterService/RpcCall"
	RouterService_StreamCall_FullMethodName  = "/rpc.RouterService/StreamCall"
)

// RouterServiceClient is the client API for RouterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterServiceClient interface {
	JsonMessage(ctx context.Context, in *JsonReq, opts ...grpc.CallOption) (*JsonRsp, error)
	RpcCall(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
	StreamCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamReq, StreamRsp], error)
}

type routerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterServiceClient(cc grpc.ClientConnInterface) RouterServiceClient {
	return &routerServiceClient{cc}
}

func (c *routerServiceClient) JsonMessage(ctx context.Context, in *JsonReq, opts ...grpc.CallOption) (*JsonRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonRsp)
	err := c.cc.Invoke(ctx, RouterService_JsonMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerServiceClient) RpcCall(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rsp)
	err := c.cc.Invoke(ctx, RouterService_RpcCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerServiceClient) StreamCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamReq, StreamRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RouterService_ServiceDesc.Streams[0], RouterService_StreamCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamReq, StreamRsp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouterService_StreamCallClient = grpc.BidiStreamingClient[StreamReq, StreamRsp]

// RouterServiceServer is the server API for RouterService service.
// All implementations must embed UnimplementedRouterServiceServer
// for forward compatibility.
type RouterServiceServer interface {
	JsonMessage(context.Context, *JsonReq) (*JsonRsp, error)
	RpcCall(context.Context, *Req) (*Rsp, error)
	StreamCall(grpc.BidiStreamingServer[StreamReq, StreamRsp]) error
	mustEmbedUnimplementedRouterServiceServer()
}

// UnimplementedRouterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouterServiceServer struct{}

func (UnimplementedRouterServiceServer) JsonMessage(context.Context, *JsonReq) (*JsonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JsonMessage not implemented")
}
func (UnimplementedRouterServiceServer) RpcCall(context.Context, *Req) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcCall not implemented")
}
func (UnimplementedRouterServiceServer) StreamCall(grpc.BidiStreamingServer[StreamReq, StreamRsp]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCall not implemented")
}
func (UnimplementedRouterServiceServer) mustEmbedUnimplementedRouterServiceServer() {}
func (UnimplementedRouterServiceServer) testEmbeddedByValue()                       {}

// UnsafeRouterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServiceServer will
// result in compilation errors.
type UnsafeRouterServiceServer interface {
	mustEmbedUnimplementedRouterServiceServer()
}

func RegisterRouterServiceServer(s grpc.ServiceRegistrar, srv RouterServiceServer) {
	// If the following call pancis, it indicates UnimplementedRouterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouterService_ServiceDesc, srv)
}

func _RouterService_JsonMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServiceServer).JsonMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouterService_JsonMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServiceServer).JsonMessage(ctx, req.(*JsonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterService_RpcCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServiceServer).RpcCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouterService_RpcCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServiceServer).RpcCall(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterService_StreamCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServiceServer).StreamCall(&grpc.GenericServerStream[StreamReq, StreamRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RouterService_StreamCallServer = grpc.BidiStreamingServer[StreamReq, StreamRsp]

// RouterService_ServiceDesc is the grpc.ServiceDesc for RouterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RouterService",
	HandlerType: (*RouterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JsonMessage",
			Handler:    _RouterService_JsonMessage_Handler,
		},
		{
			MethodName: "RpcCall",
			Handler:    _RouterService_RpcCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCall",
			Handler:       _RouterService_StreamCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/call.proto",
}
